$fwBolder: 800;
$fwBold: 600;
$fwNormal: 400;
$fwLight: 300;
$fwLighter: 200;

$fsHuge: 0.5rem;
$fsLarge: 0.4rem;
$fsMedium: 0.3rem;
$fsSmall: 0.2rem;
$fsMini: 0.1rem;

// CSS全局变量
:root {
  --bg-color: #fff;
  --main-color: #000;
  --minor-color: #333;
}

@mixin border-mobile(
  $dirs: bottom,
  $color: #eee,
  $radius: (
    0,
    0,
    0,
    0,
  ),
  $selector: after
) {
  // 单方向边框
  @if (type-of($dirs) == string) {
    $dirs: ($dirs);
  }
  @each $dir in $dirs {
    border-#{$dir}: 1px solid $color;
  }
  // 判断圆角类型
  @if (type-of($radius) == list) {
    border-radius: nth($radius, 1) nth($radius, 2) nth($radius, 3) nth($radius, 4);
  } @else {
    border-radius: $radius;
  }

  @media only screen and (-webkit-min-device-pixel-ratio: 2) {
    & {
      position: relative;
      // 隐藏原始边框
      @each $dir in $dirs {
        border-#{$dir}: none;
      }
    }

    &:#{$selector} {
      content: '';
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      width: 200%;
      height: 200%;
      padding: 1px;
      transform: scale(0.5);
      transform-origin: 0 0;
      border: 0 solid $color;
      box-sizing: border-box;
      pointer-events: none;

      @each $dir in $dirs {
        border-#{$dir}-width: 1px;
      }
      // 判断圆角类型
      @if (type-of($radius) == list) {
        border-radius: nth($radius, 1) * 2 nth($radius, 2) * 2 nth($radius, 3) * 2 nth($radius, 4) * 2;
      } @else {
        border-radius: $radius * 2;
      }
    }
  }

  @media only screen and (-webkit-min-device-pixel-ratio: 3) {
    &:#{$selector} {
      width: 300%;
      height: 300%;
      transform: scale(0.3333);

      // 判断圆角类型
      @if (type-of($radius) == list) {
        border-radius: nth($radius, 1) * 3 nth($radius, 2) * 3 nth($radius, 3) * 3 nth($radius, 4) * 3;
      } @else {
        border-radius: $radius * 3;
      }
    }
  }
}

// 兼容ReactNative边框样式
@mixin border-rn($dirs, $width, $style, $color) {
  border: 0 $style $color;
  @each $dir in $dirs {
    #{border-#{$dir}-width}: $width;
  }
}

@mixin clearfix {
  zoom: 1;

  &:after {
    content: '.';
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
  }
}

@mixin hover-underline($bgColor: blue) {
  position: relative;

  &::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0;
    width: 100%;
    height: 1px;
    background-color: $bgColor;
    transform: scaleX(0);
    transform-origin: bottom right;
    transition: transform 0.25s ease-out;
  }

  &:hover::after {
    transform: scaleX(1);
    transform-origin: bottom left;
  }
}

@mixin input-checkbox {
  &[type='checkbox'] {
    visibility: hidden;

    & + label {
      position: relative;
    }

    & + label::before {
      content: '\a0';
      display: inline-block;
      position: absolute;
      top: 50%;
      left: -1.5em;
      width: 1em;
      height: 1em;
      margin-top: -0.5em;
      border-radius: 0.1em;
      border: 1px solid #eee;
      background-color: #fff;
      box-sizing: border-box;
    }

    &:checked + label::before {
      content: '\2713';
      background-color: blue;
    }
  }
}

@mixin input-placeholder($fontSize, $color) {
  &::-webkit-input-placeholder {
    font-size: $fontSize;
    color: $color;
  }
  &:-ms-input-placeholder {
    font-size: $fontSize;
    color: $color;
  }
  &::-moz-placeholder {
    font-size: $fontSize;
    color: $color;
  }
  &:-moz-placeholder {
    font-size: $fontSize;
    color: $color;
  }
}

@mixin loading-circle($width: 1em, $bdColor: #aaa, $bgColor: #eee) {
  width: $width;
  height: $width;
  border-radius: 50%;
  border: $width / 10 solid $bgColor;
  border-left-color: $bdColor;
  animation: loading-circle 1s linear infinite;
}

@mixin loading-point($bgColor: gray) {
  position: relative;
  width: 1em;
  height: 1em;
  border-radius: 50%;
  background: $bgColor;
  animation: loading-point 0.6s infinite alternate;

  &::before {
    content: '';
    display: block;
    position: absolute;
    top: 0;
    left: 1.5em;
    width: 1em;
    height: 1em;
    border-radius: 50%;
    background: $bgColor;
    animation: loading-point 0.6s 0.2s infinite alternate;
  }

  &::after {
    content: '';
    display: block;
    position: absolute;
    top: 0;
    left: 3em;
    width: 1em;
    height: 1em;
    border-radius: 50%;
    background: $bgColor;
    animation: loading-point 0.6s 0.4s infinite alternate;
  }
}

@mixin shadow($blur: 0.5em) {
  z-index: 1;
  position: relative;

  &::after {
    content: '';
    position: absolute;
    top: $blur;
    width: 100%;
    height: 100%;
    background: inherit;
    filter: blur($blur);
    opacity: 0.5;
  }
}

@mixin scrollbar($orient: 'vertical', $barWidth: 10px, $thumbColor: #aaa, $trackColor: #eee) {
  @if $orient == 'vertical' {
    overflow-y: scroll;

    &::-webkit-scrollbar {
      width: $barWidth;
    }
    &::-webkit-scrollbar-thumb {
      border-radius: $barWidth;
      background-color: $thumbColor;
    }
    &::-webkit-scrollbar-track {
      border-radius: $barWidth;
      background-color: $trackColor;
    }
  } @else {
    overflow-x: scroll;

    &::-webkit-scrollbar {
      height: $barWidth;
    }
    &::-webkit-scrollbar-thumb {
      border-radius: $barWidth;
      background-color: $thumbColor;
    }
    &::-webkit-scrollbar-track {
      border-radius: $barWidth;
      background-color: $trackColor;
    }
  }
}

@mixin text-gradient($gradient: linear-gradient(180deg, red, green, blue)) {
  font-size: 1em;
  background: $gradient;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

@mixin text-hyphens {
  hyphens: auto;
  word-wrap: break-word;
  -webkit-hyphens: auto;
}

@mixin text-ellipsis($line: 1) {
  @if $line == 1 {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  } @else {
    display: -webkit-box;
    overflow: hidden;
    text-overflow: ellipsis;
    -webkit-line-clamp: $line;
    -webkit-box-orient: vertical;
  }
}

@mixin text-ellipsis-single {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

@mixin text-ellipsis-multi($maxHeight: 3em, $bgColor: #fff) {
  position: relative;
  overflow: hidden;
  max-height: $maxHeight;
  background-color: $bgColor;

  &::after {
    content: '...';
    position: absolute;
    right: 0;
    bottom: 0;
    width: 2em;
    text-align: center;
    background: linear-gradient(90deg, transparent, $bgColor 20%);
  }
}

@mixin triangle($dir: bottom, $size: 5px, $color: black) {
  width: 0;
  height: 0;
  border-style: solid;

  @if ($dir == top) {
    border-width: 0 $size $size $size;
    border-color: transparent transparent $color transparent;
  } @else if ($dir == left) {
    border-width: $size $size $size 0;
    border-color: transparent $color transparent transparent;
  } @else if ($dir == right) {
    border-width: $size 0 $size $size;
    border-color: transparent transparent transparent $color;
  } @else if ($dir == bottom) {
    border-width: $size $size 0 $size;
    border-color: $color transparent transparent transparent;
  }
}

@mixin triangle-top($bdWidth: 10px, $bdColor: #eee, $bgColor: #fff) {
  position: relative;
  background: $bgColor;
  border: 1px solid $bdColor;

  &:before {
    content: '';
    position: absolute;
    left: 19px;
    bottom: 100%;
    border: ($bdWidth + 1px) solid transparent;
    border-bottom-color: $bdColor;
  }

  &:after {
    content: '';
    position: absolute;
    left: 20px;
    bottom: 100%;
    border: $bdWidth solid transparent;
    border-bottom-color: $bgColor;
  }
}

@keyframes loading-circle {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes loading-point {
  from {
    opacity: 1;
  }
  to {
    opacity: 0.3;
  }
}
